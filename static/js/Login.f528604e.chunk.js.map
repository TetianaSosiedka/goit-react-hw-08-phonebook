{"version":3,"file":"static/js/Login.f528604e.chunk.js","mappings":"sOAEaA,E,QAAOC,GAAAA,KAAH,+Q,oECsGjB,EA9Fc,WACZ,OAAsCC,EAAAA,EAAAA,GAAc,IAA5CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,SAEzB,GAAmDC,EAAAA,EAAAA,MAAnD,eAAOC,EAAP,YAAgBC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,UAAWC,EAApC,EAAoCA,UAE9BC,GAAWC,EAAAA,EAAAA,MAEXC,GAAeC,EAAAA,EAAAA,MACfC,GAAcD,EAAAA,EAAAA,MAWdE,EAAmB,SAAAC,GACvBZ,EAASY,EAAMC,OAAOC,KAAMF,EAAMC,OAAOE,QAG3C,OACE,iCACE,kDACA,UAACpB,EAAD,CAAMqB,SAhBW,SAAAJ,GACnBA,EAAMK,iBAGNf,EADiB,CAAEJ,MAAAA,EAAOC,SAAAA,IAG1BC,EAAS,KAUP,WACE,mBAAOkB,QAASV,EAAhB,WACE,qCACA,kBACEW,GAAIX,EACJY,SAAUT,EACVU,KAAK,QACLP,KAAK,QACLQ,QAAQ,4CACRC,MAAM,oFACNC,UAAQ,EACRT,MAAOjB,QAGX,mBAAOoB,QAASR,EAAhB,WACE,wCACA,kBACES,GAAIT,EACJU,SAAUT,EACVU,KAAK,WACLP,KAAK,WAGLU,UAAQ,EACRT,MAAOhB,QAIX,UAAC0B,EAAA,EAAD,CACEC,QAAQ,YACRC,KAAK,QACLN,KAAK,SACLO,SAAUxB,EAJZ,kBAOGA,IACC,SAAC,KAAD,CACEyB,OAAO,OACPC,MAAM,OACNC,OAAO,IACPC,MAAM,UACNC,UAAU,6BAKjB9B,GACC+B,IAAAA,OAAAA,QACE,QACA,wBACA,MACA,eAIH7B,GACC6B,IAAAA,OAAAA,QACE,UACA,8BACA,MACA,WACE5B,EAAS,YAAa,CAAE6B,SAAS,Y,4CC5D7C,IAnCsB,WACpB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOtB,EAAP,KAAauB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOtC,EAAP,KAAc0C,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOrC,EAAP,KAAiB0C,EAAjB,KA4BA,MAAO,CAAE3B,KAAAA,EAAMwB,OAAAA,EAAQxC,MAAAA,EAAOC,SAAAA,EAAUC,SA1BvB,SAAC0C,EAAYC,GAC5B,OAAQD,GACN,IAAK,OACHL,EAAQM,GACR,MAEF,IAAK,SACHJ,EAAUI,GACV,MAEF,IAAK,QACHH,EAASG,GACT,MAEF,IAAK,WACHF,EAAYE,GACZ,MAEF,QACEN,EAAQ,IACRE,EAAU,IACVC,EAAS,S,sDC5BV,IAkBI/B,EAAS,eAACkB,EAAD,uDAAQ,GAAR,OAClBiB,OAAOC,gBAAgB,IAAIC,WAAWnB,IAAOoB,QAAO,SAAC5B,EAAI6B,GAWvD,OARE7B,IAFF6B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["components/Login/Login.styled.jsx","components/Login/Login.jsx","hooks/useGetContact.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 400px;\n  border: solid 2px #000000;\n  padding: 15px;\n  label {\n    display: block;\n    margin-bottom: 15px;\n  }\n  span {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: 700;\n  }\n  input {\n    padding: 5px;\n  }\n`;\n","import { useNavigate } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport { Form } from './Login.styled';\nimport useGetContact from '../../hooks/useGetContact';\nimport { Rings } from 'react-loader-spinner';\nimport { nanoid } from 'nanoid';\nimport { useLoginMutation } from '../../redux/userApi';\n\nimport Notiflix from 'notiflix';\n\nconst Login = () => {\n  const { email, password, setState } = useGetContact('');\n\n  const [login, { isError, isLoading, isSuccess }] = useLoginMutation();\n\n  const navigate = useNavigate();\n\n  const idInputEmail = nanoid();\n  const idInputPass = nanoid();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const userDate = { email, password };\n    login(userDate);\n\n    setState('');\n  };\n\n  const handeInputChange = event => {\n    setState(event.target.name, event.target.value);\n  };\n\n  return (\n    <>\n      <h2>Complete the fields:</h2>\n      <Form onSubmit={handleSubmit}>\n        <label htmlFor={idInputEmail}>\n          <span>Email</span>\n          <input\n            id={idInputEmail}\n            onChange={handeInputChange}\n            type=\"email\"\n            name=\"email\"\n            pattern=\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n            title=\"Email must have @ and can contain numbers, letters, dots, underscores and dashes.\"\n            required\n            value={email}\n          />\n        </label>\n        <label htmlFor={idInputPass}>\n          <span>Password</span>\n          <input\n            id={idInputPass}\n            onChange={handeInputChange}\n            type=\"password\"\n            name=\"password\"\n            // pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n            // title=\"Password mast have UpperCase, LowerCase, Number/SpecialChar and min 8 Chars\"\n            required\n            value={password}\n          />\n        </label>\n\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          type=\"submit\"\n          disabled={isLoading}\n        >\n          Login\n          {isLoading && (\n            <Rings\n              height=\"30px\"\n              width=\"30px\"\n              radius=\"9\"\n              color=\"#ffffff\"\n              ariaLabel=\"three-dots-loading\"\n            />\n          )}\n        </Button>\n      </Form>\n      {isError &&\n        Notiflix.Report.failure(\n          'Error',\n          'There is no such user',\n          'Ok',\n          function cb() {\n            // callback\n          }\n        )}\n      {isSuccess &&\n        Notiflix.Report.success(\n          'Success',\n          'Wellcome to your phonebook!',\n          'Ok',\n          function cb() {\n            navigate(`/contacts`, { replace: true });\n          }\n        )}\n    </>\n  );\n};\n\nexport default Login;\n","import { useState } from 'react';\n\nconst useGetContact = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const setState = (targetName, targetValue) => {\n    switch (targetName) {\n      case 'name':\n        setName(targetValue);\n        break;\n\n      case 'number':\n        setNumber(targetValue);\n        break;\n\n      case 'email':\n        setEmail(targetValue);\n        break;\n\n      case 'password':\n        setPassword(targetValue);\n        break;\n\n      default:\n        setName('');\n        setNumber('');\n        setEmail('');\n        break;\n    }\n  };\n\n  return { name, number, email, password, setState };\n};\n\nexport default useGetContact;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Form","styled","useGetContact","email","password","setState","useLoginMutation","login","isError","isLoading","isSuccess","navigate","useNavigate","idInputEmail","nanoid","idInputPass","handeInputChange","event","target","name","value","onSubmit","preventDefault","htmlFor","id","onChange","type","pattern","title","required","Button","variant","size","disabled","height","width","radius","color","ariaLabel","Notiflix","replace","useState","setName","number","setNumber","setEmail","setPassword","targetName","targetValue","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}