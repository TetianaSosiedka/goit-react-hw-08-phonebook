{"version":3,"file":"static/js/AddContact.033f4c02.chunk.js","mappings":"oKAqCA,IAnCsB,WACpB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAgCN,EAAAA,EAAAA,UAAS,IAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KA4BA,MAAO,CAAEP,KAAAA,EAAME,OAAAA,EAAQE,MAAAA,EAAOE,SAAAA,EAAUE,SA1BvB,SAACC,EAAYC,GAC5B,OAAQD,GACN,IAAK,OACHR,EAAQS,GACR,MAEF,IAAK,SACHP,EAAUO,GACV,MAEF,IAAK,QACHL,EAASK,GACT,MAEF,IAAK,WACHH,EAAYG,GACZ,MAEF,QACET,EAAQ,IACRE,EAAU,IACVE,EAAS,S,qJC3BJM,E,QAAOC,GAAAA,KAAH,+Q,6BC4HjB,EA3GuB,WACrB,OACEC,EAAAA,EAAAA,MADF,eAAOC,EAAP,YAAkBC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,UAAWC,EAAxC,EAAwCA,QAASC,EAAjD,EAAiDA,gBAE3CC,GAAaC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SAC/CC,GAASC,EAAAA,EAAAA,IAAoB,GAAI,CAAEC,KAA4B,IAAtBP,EAAWQ,SAApDH,KAEFD,EAAQJ,GAAcK,EAEtBI,GAAWC,EAAAA,EAAAA,MAEjB,GAAmCC,EAAAA,EAAAA,KAA3B9B,EAAR,EAAQA,KAAME,EAAd,EAAcA,OAAQM,EAAtB,EAAsBA,SAEhBuB,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAEhBE,EAAmB,SAAAC,GACvB3B,EAAS2B,EAAMC,OAAOpC,KAAMmC,EAAMC,OAAOC,QA2B3C,OACE,iCACE,UAAC1B,EAAD,CAAM2B,SAVW,SAAAH,GAhBD,IAAAI,EAiBlBJ,EAAMK,iBAjBYD,EAmBN,CAAEvC,KAAAA,EAAME,OAAAA,GAlBDqB,EAAMkB,MAAK,SAAAC,GAAI,OAAIA,EAAK1C,OAASuC,EAAQvC,QAE1D2C,IAAAA,OAAAA,QACE,UADF,UAEKJ,EAAQvC,KAFb,yBAGE,UACA,eAMJc,EAAQyB,GAQR/B,KAKE,WACE,mBAAOoC,QAASb,EAAhB,WACE,oCACA,kBACEc,GAAId,EACJe,SAAUZ,EACVa,KAAK,OACL/C,KAAK,OACLgD,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRb,MAAOrC,QAGX,mBAAO4C,QAASX,EAAhB,WACE,sCACA,kBACEY,GAAIZ,EACJa,SAAUZ,EACVa,KAAK,MACL/C,KAAK,SACLgD,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRb,MAAOnC,QAIX,UAACiD,EAAA,EAAD,CACEC,QAAQ,YACRC,KAAK,QACLN,KAAK,SACLO,SAAUvC,EAJZ,UAMG,IANH,qBAUAG,GACAF,GACA2B,IAAAA,OAAAA,QACE,UACA,gBACA,MACA,WACEf,EAAS,iBAGbV,GACAD,GACA0B,IAAAA,OAAAA,QACE,eACA,kBACA,MACA,mBC3GV,EATmB,WACjB,OACE,iCACE,oDACA,SAAC,EAAD,S,sDCLC,IAkBIX,EAAS,eAACqB,EAAD,uDAAQ,GAAR,OAClBE,OAAOC,gBAAgB,IAAIC,WAAWJ,IAAOK,QAAO,SAACb,EAAIc,GAWvD,OAREd,IAFFc,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["hooks/useGetContact.jsx","components/Form/Filter.styled.jsx","components/Form/Form.jsx","pages/addContact.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\n\nconst useGetContact = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const setState = (targetName, targetValue) => {\n    switch (targetName) {\n      case 'name':\n        setName(targetValue);\n        break;\n\n      case 'number':\n        setNumber(targetValue);\n        break;\n\n      case 'email':\n        setEmail(targetValue);\n        break;\n\n      case 'password':\n        setPassword(targetValue);\n        break;\n\n      default:\n        setName('');\n        setNumber('');\n        setEmail('');\n        break;\n    }\n  };\n\n  return { name, number, email, password, setState };\n};\n\nexport default useGetContact;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 400px;\n  border: solid 2px #000000;\n  padding: 15px;\n  label {\n    display: block;\n    margin-bottom: 15px;\n  }\n  span {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: 700;\n  }\n  input {\n    padding: 5px;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  useGetContactsQuery,\n  useAddContactMutation,\n} from '../../redux/contactsApi';\n\nimport { useNavigate } from 'react-router-dom';\n\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\n\nimport { Form } from './Filter.styled';\n\nimport useGetContact from '../../hooks/useGetContact';\n\nimport Button from '@mui/material/Button';\n\n//-----------------------------------------------------\n\nconst NewContactForm = () => {\n  const [addItem, { isLoading, isSuccess, isError, isUninitialized }] =\n    useAddContactMutation();\n  const itemsState = useSelector(state => state.contacts.items);\n  const { data } = useGetContactsQuery('', { skip: itemsState.length !== 0 });\n\n  const items = itemsState || data;\n\n  const navigate = useNavigate();\n\n  const { name, number, setState } = useGetContact();\n\n  const idInputName = nanoid();\n  const idInputNumber = nanoid();\n\n  const handeInputChange = event => {\n    setState(event.target.name, event.target.value);\n  };\n\n  const addDateForm = contact => {\n    const incontacts = items.find(item => item.name === contact.name);\n    if (incontacts) {\n      Notiflix.Report.warning(\n        'Warning',\n        `${contact.name} is alredy incontacts`,\n        'Cancel',\n        function cb() {\n          // callback\n        }\n      );\n      return;\n    }\n    addItem(contact);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    addDateForm({ name, number });\n\n    setState();\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <label htmlFor={idInputName}>\n          <span>Name</span>\n          <input\n            id={idInputName}\n            onChange={handeInputChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n          />\n        </label>\n        <label htmlFor={idInputNumber}>\n          <span>Number</span>\n          <input\n            id={idInputNumber}\n            onChange={handeInputChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n          />\n        </label>\n\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          type=\"submit\"\n          disabled={isLoading}\n        >\n          {' '}\n          Add contact\n        </Button>\n      </Form>\n      {!isUninitialized &&\n        isSuccess &&\n        Notiflix.Report.success(\n          'Success',\n          'Contact added',\n          'Ok',\n          function cb() {\n            navigate(`/contacts`);\n          }\n        )}\n      {!isUninitialized &&\n        isError &&\n        Notiflix.Report.failure(\n          'Server error',\n          'Contact support',\n          'Ok',\n          function cb() {\n            // callback\n          }\n        )}\n    </>\n  );\n};\n\nexport default NewContactForm;\n","import NewContactForm from '../components/Form';\n\nconst AddContact = () => {\n  return (\n    <>\n      <h2>Enter contact details:</h2>\n      <NewContactForm />\n    </>\n  );\n};\n\nexport default AddContact;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","name","setName","number","setNumber","email","setEmail","password","setPassword","setState","targetName","targetValue","Form","styled","useAddContactMutation","addItem","isLoading","isSuccess","isError","isUninitialized","itemsState","useSelector","state","contacts","items","data","useGetContactsQuery","skip","length","navigate","useNavigate","useGetContact","idInputName","nanoid","idInputNumber","handeInputChange","event","target","value","onSubmit","contact","preventDefault","find","item","Notiflix","htmlFor","id","onChange","type","pattern","title","required","Button","variant","size","disabled","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}