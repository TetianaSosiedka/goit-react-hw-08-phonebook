{"version":3,"file":"static/js/Register.fa968192.chunk.js","mappings":"4NAEaA,E,QAAOC,GAAAA,KAAH,+Q,oECkGjB,EA3FiB,WACf,OAA4CC,EAAAA,EAAAA,GAAc,IAAlDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,SAE/B,GAA8CC,EAAAA,EAAAA,MAA9C,eAAOC,EAAP,YAAsBC,EAAtB,EAAsBA,UAAWC,EAAjC,EAAiCA,QAE3BC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAcF,EAAAA,EAAAA,MAUdG,EAAmB,SAAAC,GACvBV,EAASU,EAAMC,OAAOd,KAAMa,EAAMC,OAAOC,QAG3C,OACE,iCACE,kDACA,UAAClB,EAAD,CAAMmB,SAfW,SAAAH,GACnBA,EAAMI,iBAGNZ,EADiB,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,IAEhCC,EAAS,KAUP,WACE,mBAAOe,QAASV,EAAhB,WACE,oCACA,kBACEW,GAAIX,EACJY,SAAUR,EACVS,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRT,MAAOf,QAGX,mBAAOkB,QAASR,EAAhB,WACE,qCACA,kBACES,GAAIT,EACJU,SAAUR,EACVS,KAAK,QACLrB,KAAK,QACLsB,QAAQ,6CACRC,MAAM,oFACNC,UAAQ,EACRT,MAAOd,QAGX,mBAAOiB,QAASP,EAAhB,WACE,wCACA,kBACEQ,GAAIR,EACJS,SAAUR,EACVS,KAAK,WACLrB,KAAK,WAGLwB,UAAQ,EACRT,MAAOb,QAIX,UAACuB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,KAAK,QAAQN,KAAK,SAA9C,qBAEGf,IACC,SAAC,KAAD,CACEsB,OAAO,OACPC,MAAM,OACNC,OAAO,IACPC,MAAM,UACNC,UAAU,6BAKjBzB,GACC0B,IAAAA,OAAAA,QACE,QACA,oCACA,MACA,oB,4CCvDV,IAnCsB,WACpB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOlC,EAAP,KAAamC,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOjC,EAAP,KAAcqC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOhC,EAAP,KAAiBqC,EAAjB,KA4BA,MAAO,CAAEvC,KAAAA,EAAMoC,OAAAA,EAAQnC,MAAAA,EAAOC,SAAAA,EAAUC,SA1BvB,SAACqC,EAAYC,GAC5B,OAAQD,GACN,IAAK,OACHL,EAAQM,GACR,MAEF,IAAK,SACHJ,EAAUI,GACV,MAEF,IAAK,QACHH,EAASG,GACT,MAEF,IAAK,WACHF,EAAYE,GACZ,MAEF,QACEN,EAAQ,IACRE,EAAU,IACVC,EAAS,S,sDC5BV,IAkBI7B,EAAS,eAACkB,EAAD,uDAAQ,GAAR,OAClBe,OAAOC,gBAAgB,IAAIC,WAAWjB,IAAOkB,QAAO,SAAC1B,EAAI2B,GAWvD,OARE3B,IAFF2B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["components/Register/Register.styled.jsx","components/Register/Register.jsx","hooks/useGetContact.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 400px;\n  border: solid 2px #000000;\n  padding: 15px;\n  label {\n    display: block;\n    margin-bottom: 15px;\n  }\n  span {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: 700;\n  }\n  input {\n    padding: 5px;\n  }\n`;\n","import Button from '@mui/material/Button';\nimport { Form } from './Register.styled';\nimport useGetContact from '../../hooks/useGetContact';\nimport { nanoid } from 'nanoid';\nimport { Rings } from 'react-loader-spinner';\nimport Notiflix from 'notiflix';\n\nimport { useRegisterMutation } from '../../redux/userApi';\n\nconst Register = () => {\n  const { name, email, password, setState } = useGetContact('');\n\n  const [registerApi, { isLoading, isError }] = useRegisterMutation();\n\n  const idInputName = nanoid();\n  const idInputEmail = nanoid();\n  const idInputPass = nanoid();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const userDate = { name, email, password };\n    registerApi(userDate);\n    setState('');\n  };\n\n  const handeInputChange = event => {\n    setState(event.target.name, event.target.value);\n  };\n\n  return (\n    <>\n      <h2>Complete the fields:</h2>\n      <Form onSubmit={handleSubmit}>\n        <label htmlFor={idInputName}>\n          <span>Name</span>\n          <input\n            id={idInputName}\n            onChange={handeInputChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n          />\n        </label>\n        <label htmlFor={idInputEmail}>\n          <span>Email</span>\n          <input\n            id={idInputEmail}\n            onChange={handeInputChange}\n            type=\"email\"\n            name=\"email\"\n            pattern=\"\\[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n            title=\"Email must have @ and can contain numbers, letters, dots, underscores and dashes.\"\n            required\n            value={email}\n          />\n        </label>\n        <label htmlFor={idInputPass}>\n          <span>Password</span>\n          <input\n            id={idInputPass}\n            onChange={handeInputChange}\n            type=\"password\"\n            name=\"password\"\n            // pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n            // title=\"Password mast have UpperCase, LowerCase, Number/SpecialChar and min 8 Chars\"\n            required\n            value={password}\n          />\n        </label>\n\n        <Button variant=\"contained\" size=\"small\" type=\"submit\">\n          register\n          {isLoading && (\n            <Rings\n              height=\"30px\"\n              width=\"30px\"\n              radius=\"9\"\n              color=\"#ffffff\"\n              ariaLabel=\"three-dots-loading\"\n            />\n          )}\n        </Button>\n      </Form>\n      {isError &&\n        Notiflix.Report.failure(\n          'Error',\n          'An error registration. Try again.',\n          'Ok',\n          function cb() {\n            // callback\n          }\n        )}\n    </>\n  );\n};\n\nexport default Register;\n","import { useState } from 'react';\n\nconst useGetContact = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const setState = (targetName, targetValue) => {\n    switch (targetName) {\n      case 'name':\n        setName(targetValue);\n        break;\n\n      case 'number':\n        setNumber(targetValue);\n        break;\n\n      case 'email':\n        setEmail(targetValue);\n        break;\n\n      case 'password':\n        setPassword(targetValue);\n        break;\n\n      default:\n        setName('');\n        setNumber('');\n        setEmail('');\n        break;\n    }\n  };\n\n  return { name, number, email, password, setState };\n};\n\nexport default useGetContact;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Form","styled","useGetContact","name","email","password","setState","useRegisterMutation","registerApi","isLoading","isError","idInputName","nanoid","idInputEmail","idInputPass","handeInputChange","event","target","value","onSubmit","preventDefault","htmlFor","id","onChange","type","pattern","title","required","Button","variant","size","height","width","radius","color","ariaLabel","Notiflix","useState","setName","number","setNumber","setEmail","setPassword","targetName","targetValue","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}